generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique @db.VarChar(255) 
  password      String
  username      String  @unique
  role          Role    @default(USER) 
  currentBalance Int     @default(20)
  totalEarning   Int     @default(20)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quizzes       Quiz[] // ðŸ‘ˆ Added relation (A user can create multiple quizzes)
  attempts      UserAttempt[] // ðŸ‘ˆ Added relation (A user can attempt multiple quizzes)
}

enum Role {
  USER    
  ADMIN    
  MODERATOR 
}

model Quiz {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(255) 
  entryFee    Int      @default(0)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  questions   Question[]
  attempts    UserAttempt[] // ðŸ‘ˆ Added relation (A quiz can have multiple attempts)

  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade) // ðŸ‘ˆ Fix
}

model Question {
  id          String   @id @default(uuid())
  quizId      String
  questionText String  
  timeLimit   Int      // 10, 20, or 30 seconds
  correctOptionId String  
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     Option[]
  responses   Response[] // ðŸ‘ˆ Added relation (A question can have multiple responses)
}

model Option {
  id          String   @id @default(uuid())
  questionId  String
  text        String  @db.VarChar(255) 
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}


model UserAttempt {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  score     Int      @default(0) 
  completed Boolean  @default(false) 
  startedAt DateTime @default(now())
  finishedAt DateTime?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  responses Response[]

  @@unique([userId, quizId]) // ðŸ‘ˆ Enforces that a user can attempt a quiz only once
}


model Response {
  id          String   @id @default(uuid())
  userAttemptId String
  questionId  String
  selectedOptionId String
  isCorrect   Boolean   
  timeTaken   Int    

  userAttempt UserAttempt @relation(fields: [userAttemptId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade) // ðŸ‘ˆ Fixed
}




model ContactUs {
  id      String @id @default(uuid())
  email   String @db.VarChar(255) 
  subject String @db.VarChar(255)
  content String 
}
